////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Código de Arduino de un sensor de nivel de agua y de caudal que lanza una alerta temprana /////////////////////////////
//// mediante un módulo GSM A6 para la prevención de inundaciones por fallas en el alcantarillado //////////////////////////
//// en periodos de lluvia.                                                                    /////////////////////////////
//// Código realizado por Christian David para Creatvra.                                       /////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//dar permisos desde Linux sudo chmod a+rw /dev/ttyACM0


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Constantes y funciones para el sensor de flujo  ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

volatile int NumPulsos; //Variable para la cantidad de pulsos recibidos.
int PinSensor = 2;    //Sensor conectado en el pin 2.
float factor_conversion=7.5; //Constante propia del sensor para convertir de frecuencia a caudal. En este caso es un YF-S201.

//---Función que se ejecuta en interrupción---------------
void ContarPulsos ()
{ 
  NumPulsos++;  //incrementamos la variable de pulsos
} 

//---Función para obtener frecuencia de los pulsos--------
int ObtenerFrecuencia() 
{
  int frecuencia;
  NumPulsos = 0;   //Ponemos a 0 el número de pulsos
  interrupts();    //Habilitamos las interrupciones
  delay(1000);   //muestra de 1 segundo
  noInterrupts(); //Desabilitamos las interrupciones
  frecuencia=NumPulsos; //Hz(pulsos por segundo)
  return frecuencia;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Constantes para el módulo GSM  ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

char phone_no[]="+573153812808";   //sustituir lo que va entre comillas por el número de celular deseado.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Constantes para el sensor de nivel por flotación //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int sensor_flotador = 4; 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {

  Serial.begin(115200);

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  pinMode(sensor_flotador, INPUT_PULLUP); // Se define el pin en modo alto.
  delay(500);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //Medidas para el sensor de flujo
  pinMode(PinSensor, INPUT); 
  attachInterrupt(0,ContarPulsos,RISING); //(Interrupción 0(Pin2), función, Flanco de subida)

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  pinMode(7, OUTPUT);//Pin del led.
}

void loop() {

  //////////////////////////////////////////////
  //Bloque de órdenes para el sensor de flujo//
  ////////////////////////////////////////////
    
  float frecuencia=ObtenerFrecuencia(); //obtenemos la Frecuencia de los pulsos en Hz
  float caudal_L_m=frecuencia/factor_conversion; //calculamos el caudal en L/m
  float caudal_L_h=caudal_L_m*60; //calculamos el caudal en L/h

  //-----Enviamos por el puerto serie---------------
  Serial.print ("FrecuenciaPulsos: "); 
  Serial.print (frecuencia,0); 
  Serial.print ("Hz\tCaudal: "); 
  Serial.print (caudal_L_m,3); 
  Serial.print (" L/m\t"); 
  Serial.print (caudal_L_h,3); 
  Serial.println ("L/h"); 
  delay(1000);


  Serial.print("Estado del switch: "); //Muestra el estado del sensor flotador de nivel.

  //Inicio de la condición para enviar el mensaje. Si el estado del sensor flotador está en HIGH que se traduce en OFF entonces no envía nada. 
  //Si no (else) cuando el sensor marque lo distinto, es decir, ON, inicia el bloque de órdenes para enviar el mensaje de texto.
  if (digitalRead(sensor_flotador) == HIGH) {
    Serial.println("OFF");

    digitalWrite(7, LOW);

    delay(3000);
  }
  else {
    Serial.println("ON");//Muestra en el serial el estado del nivel.

    digitalWrite(7, HIGH);//Prende el led para indicar que se ha entrado en el "else".

    Serial.println("AT+CMGF=1");//Comando del GSM.    
    delay(4000); 
    Serial.print("AT+CMGS=\"");//Comando del GSM
    Serial.print(phone_no); 
    Serial.write(0x22);
    Serial.write(0x0D);  // hex equivalent of Carraige return :: equivalente hexadecimal de retorno de carro
    Serial.write(0x0A);  // hex equivalent of newline :: equivalente hexadecimal de nueva línea 
    delay(2000);
    Serial.print("Sensor encendido"); //Contenido del mensaje de texto que se quiera enviar.
    delay(500);
    Serial.println (char(26));//the ASCII code of the ctrl+z is 26 :: Código ASCII para ctrl+z

    delay(30000);//Tiempo de espera para el siguiente ciclo.
  }

  
  
  
}
